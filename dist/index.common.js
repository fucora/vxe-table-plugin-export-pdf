"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.VXETablePluginExportPDF = void 0;

var _xeUtils = _interopRequireDefault(require("xe-utils/methods/xe-utils"));

var _jspdf = _interopRequireDefault(require("jspdf"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function getSeq($table, row, rowIndex, column, columnIndex) {
  // 在 v3.0 中废弃 startIndex、indexMethod
  var seqOpts = $table.seqOpts;
  var seqMethod = seqOpts.seqMethod || column.indexMethod;
  return seqMethod ? seqMethod({
    row: row,
    rowIndex: rowIndex,
    column: column,
    columnIndex: columnIndex
  }) : (seqOpts.startIndex || $table.startIndex) + rowIndex + 1;
}

function exportPDF(params) {
  var colWidth = 0;
  var $table = params.$table,
      options = params.options,
      columns = params.columns,
      datas = params.datas;
  var treeConfig = $table.treeConfig,
      treeOpts = $table.treeOpts,
      tableFullData = $table.tableFullData;
  var type = options.type,
      filename = options.filename,
      isHeader = options.isHeader,
      isFooter = options.isFooter,
      original = options.original,
      data = options.data,
      message = options.message,
      footerFilterMethod = options.footerFilterMethod;
  var footList = [];
  var headers = columns.map(function (column) {
    var title = _xeUtils["default"].toString(original ? column.property : column.getTitle()) || ' ';
    colWidth += column.renderWidth;
    return {
      name: column.id,
      prompt: title,
      width: column.renderWidth
    };
  });
  var rowList = [];
  var colRatio = colWidth / 100;
  headers.forEach(function (column) {
    column.width = Math.floor(column.width / colRatio * 4) - 1;
  });

  if (treeConfig) {
    rowList = datas.map(function (row) {
      var item = {};
      columns.forEach(function (column) {
        item[column.id] = column.treeNode ? ' '.repeat(row._level * treeOpts.indent / 8) + row[column.id] : row[column.id];
      });
      return item;
    });
  } else {
    rowList = datas;
  }

  if (isFooter) {
    var footerData = $table.footerData;
    var footers = footerFilterMethod ? footerData.filter(footerFilterMethod) : footerData;
    footers.forEach(function (rows) {
      var item = {};
      columns.forEach(function (column) {
        item[column.id] = _xeUtils["default"].toString(rows[$table.$getColumnIndex(column)]) || ' ';
      });
      footList.push(item);
    });
  } // 转换pdf


  var doc = new _jspdf["default"]({
    putOnlyUsedFonts: true,
    orientation: 'landscape'
  });
  doc.table(1, 1, rowList.concat(footList), headers, {
    printHeaders: isHeader,
    autoSize: false
  });
  doc.save("".concat(filename, ".").concat(type));

  if (message !== false) {
    $table.$XModal.message({
      message: i18n('vxe.table.expSuccess'),
      status: 'success'
    });
  }
}

function handleExportEvent(params) {
  if (params.options.type === 'pdf') {
    exportPDF(params);
    return false;
  }
}
/**
 * 基于 vxe-table 表格的增强插件，支持导出 pdf 格式
 */


var VXETablePluginExportPDF = {
  install: function install(xtable) {
    Object.assign(xtable.types, {
      pdf: 0
    });
    xtable.interceptor.mixin({
      'event.export': handleExportEvent
    });
    VXETablePluginExportPDF.t = xtable.t;
  }
};
exports.VXETablePluginExportPDF = VXETablePluginExportPDF;

function i18n(key) {
  if (VXETablePluginExportPDF.t) {
    return VXETablePluginExportPDF.t(key);
  }
}

if (typeof window !== 'undefined' && window.VXETable) {
  window.VXETable.use(VXETablePluginExportPDF);
}

var _default = VXETablePluginExportPDF;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sIm5hbWVzIjpbImdldFNlcSIsIiR0YWJsZSIsInJvdyIsInJvd0luZGV4IiwiY29sdW1uIiwiY29sdW1uSW5kZXgiLCJzZXFPcHRzIiwic2VxTWV0aG9kIiwiaW5kZXhNZXRob2QiLCJzdGFydEluZGV4IiwiZXhwb3J0UERGIiwicGFyYW1zIiwiY29sV2lkdGgiLCJvcHRpb25zIiwiY29sdW1ucyIsImRhdGFzIiwidHJlZUNvbmZpZyIsInRyZWVPcHRzIiwidGFibGVGdWxsRGF0YSIsInR5cGUiLCJmaWxlbmFtZSIsImlzSGVhZGVyIiwiaXNGb290ZXIiLCJvcmlnaW5hbCIsImRhdGEiLCJtZXNzYWdlIiwiZm9vdGVyRmlsdGVyTWV0aG9kIiwiZm9vdExpc3QiLCJoZWFkZXJzIiwibWFwIiwidGl0bGUiLCJYRVV0aWxzIiwidG9TdHJpbmciLCJwcm9wZXJ0eSIsImdldFRpdGxlIiwicmVuZGVyV2lkdGgiLCJuYW1lIiwiaWQiLCJwcm9tcHQiLCJ3aWR0aCIsInJvd0xpc3QiLCJjb2xSYXRpbyIsImZvckVhY2giLCJNYXRoIiwiZmxvb3IiLCJpdGVtIiwidHJlZU5vZGUiLCJyZXBlYXQiLCJfbGV2ZWwiLCJpbmRlbnQiLCJmb290ZXJEYXRhIiwiZm9vdGVycyIsImZpbHRlciIsInJvd3MiLCIkZ2V0Q29sdW1uSW5kZXgiLCJwdXNoIiwiZG9jIiwianNQREYiLCJwdXRPbmx5VXNlZEZvbnRzIiwib3JpZW50YXRpb24iLCJ0YWJsZSIsImNvbmNhdCIsInByaW50SGVhZGVycyIsImF1dG9TaXplIiwic2F2ZSIsIiRYTW9kYWwiLCJpMThuIiwic3RhdHVzIiwiaGFuZGxlRXhwb3J0RXZlbnQiLCJWWEVUYWJsZVBsdWdpbkV4cG9ydFBERiIsImluc3RhbGwiLCJ4dGFibGUiLCJPYmplY3QiLCJhc3NpZ24iLCJ0eXBlcyIsInBkZiIsImludGVyY2VwdG9yIiwibWl4aW4iLCJ0Iiwia2V5Iiwid2luZG93IiwiVlhFVGFibGUiLCJ1c2UiXSwibWFw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RyxFQUFFO0FBQVAsS0FBNUI7QUFDQUosSUFBQUEsTUFBTSxDQUFDSyxXQUFQLENBQW1CQyxLQUFuQixDQUF5QjtBQUN2QixzQkFBZ0JUO0FBRE8sS0FBekI7QUFHQUMsSUFBQUEsdUJBQXVCLENBQUNTLENBQXhCLEdBQTRCUCxNQUFNLENBQUNPLENBQW5DO0FBQ0Q7QUFQeUMsQ0FBckM7OztBQVVQLFNBQVNaLElBQVQsQ0FBY2EsR0FBZCxFQUF5QjtBQUN2QixNQUFJVix1QkFBdUIsQ0FBQ1MsQ0FBNUIsRUFBK0I7QUFDN0IsV0FBT1QsdUJBQXVCLENBQUNTLENBQXhCLENBQTBCQyxHQUExQixDQUFQO0FBQ0Q7QUFDRjs7QUFFRCxJQUFJLE9BQU9DLE1BQVAsS0FBa0IsV0FBbEIsSUFBaUNBLE1BQU0sQ0FBQ0MsUUFBNUMsRUFBc0Q7QUFDcERELEVBQUFBLE1BQU0sQ0FBQ0MsUUFBUCxDQUFnQkMsR0FBaEIsQ0FBb0JiLHVCQUFwQjtBQUNEOztlQUVjQSx1QiIsImZpbGUiOiJpbmRleC5jb21tb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgWEVVdGlscyBmcm9tICd4ZS11dGlscy9tZXRob2RzL3hlLXV0aWxzJ1xyXG5pbXBvcnQgVlhFVGFibGUgZnJvbSAndnhlLXRhYmxlL2xpYi92eGUtdGFibGUnXHJcbmltcG9ydCBqc1BERiBmcm9tICdqc3BkZidcclxuXHJcbmZ1bmN0aW9uIGdldFNlcSgkdGFibGU6IGFueSwgcm93OiBhbnksIHJvd0luZGV4OiBudW1iZXIsIGNvbHVtbjogYW55LCBjb2x1bW5JbmRleDogbnVtYmVyKSB7XHJcbiAgLy8g5ZyoIHYzLjAg5Lit5bqf5byDIHN0YXJ0SW5kZXjjgIFpbmRleE1ldGhvZFxyXG4gIGxldCBzZXFPcHRzID0gJHRhYmxlLnNlcU9wdHNcclxuICBsZXQgc2VxTWV0aG9kID0gc2VxT3B0cy5zZXFNZXRob2QgfHwgY29sdW1uLmluZGV4TWV0aG9kXHJcbiAgcmV0dXJuIHNlcU1ldGhvZCA/IHNlcU1ldGhvZCh7IHJvdywgcm93SW5kZXgsIGNvbHVtbiwgY29sdW1uSW5kZXggfSkgOiAoKHNlcU9wdHMuc3RhcnRJbmRleCB8fCAkdGFibGUuc3RhcnRJbmRleCkgKyByb3dJbmRleCArIDEpXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGV4cG9ydFBERihwYXJhbXM6IGFueSkge1xyXG4gIGxldCBjb2xXaWR0aDogbnVtYmVyID0gMFxyXG4gIGNvbnN0IHsgJHRhYmxlLCBvcHRpb25zLCBjb2x1bW5zLCBkYXRhcyB9ID0gcGFyYW1zXHJcbiAgY29uc3QgeyB0cmVlQ29uZmlnLCB0cmVlT3B0cywgdGFibGVGdWxsRGF0YSB9ID0gJHRhYmxlXHJcbiAgY29uc3QgeyB0eXBlLCBmaWxlbmFtZSwgaXNIZWFkZXIsIGlzRm9vdGVyLCBvcmlnaW5hbCwgZGF0YSwgbWVzc2FnZSwgZm9vdGVyRmlsdGVyTWV0aG9kIH0gPSBvcHRpb25zXHJcbiAgY29uc3QgZm9vdExpc3Q6IGFueVtdID0gW11cclxuICBjb25zdCBoZWFkZXJzOiBhbnlbXSA9IGNvbHVtbnMubWFwKChjb2x1bW46IGFueSkgPT4ge1xyXG4gICAgY29uc3QgdGl0bGU6IHN0cmluZyA9IFhFVXRpbHMudG9TdHJpbmcob3JpZ2luYWwgPyBjb2x1bW4ucHJvcGVydHkgOiBjb2x1bW4uZ2V0VGl0bGUoKSkgfHwgJyAnXHJcbiAgICBjb2xXaWR0aCArPSBjb2x1bW4ucmVuZGVyV2lkdGhcclxuICAgIHJldHVybiB7XHJcbiAgICAgIG5hbWU6IGNvbHVtbi5pZCxcclxuICAgICAgcHJvbXB0OiB0aXRsZSxcclxuICAgICAgd2lkdGg6IGNvbHVtbi5yZW5kZXJXaWR0aFxyXG4gICAgfVxyXG4gIH0pXHJcbiAgbGV0IHJvd0xpc3Q6IGFueVtdID0gW107XHJcbiAgY29uc3QgY29sUmF0aW8gPSBjb2xXaWR0aCAvIDEwMFxyXG4gIGhlYWRlcnMuZm9yRWFjaCgoY29sdW1uOiBhbnkpID0+IHtcclxuICAgIGNvbHVtbi53aWR0aCA9IE1hdGguZmxvb3IoY29sdW1uLndpZHRoIC8gY29sUmF0aW8gKiA0KSAtIDFcclxuICB9KVxyXG4gIGlmICh0cmVlQ29uZmlnKSB7XHJcbiAgICByb3dMaXN0ID0gZGF0YXMubWFwKChyb3c6IGFueSkgPT4ge1xyXG4gICAgICBjb25zdCBpdGVtOiBhbnkgPSB7fVxyXG4gICAgICBjb2x1bW5zLmZvckVhY2goKGNvbHVtbjogYW55KSA9PiB7XHJcbiAgICAgICAgaXRlbVtjb2x1bW4uaWRdID0gY29sdW1uLnRyZWVOb2RlID8gKCcgJy5yZXBlYXQocm93Ll9sZXZlbCAqIHRyZWVPcHRzLmluZGVudCAvIDgpICsgcm93W2NvbHVtbi5pZF0pIDogcm93W2NvbHVtbi5pZF1cclxuICAgICAgfSlcclxuICAgICAgcmV0dXJuIGl0ZW1cclxuICAgIH0pXHJcbiAgfSBlbHNlIHtcclxuICAgIHJvd0xpc3QgPSBkYXRhc1xyXG4gIH1cclxuICBpZiAoaXNGb290ZXIpIHtcclxuICAgIGNvbnN0IGZvb3RlckRhdGE6IGFueVtdID0gJHRhYmxlLmZvb3RlckRhdGFcclxuICAgIGNvbnN0IGZvb3RlcnM6IGFueVtdID0gZm9vdGVyRmlsdGVyTWV0aG9kID8gZm9vdGVyRGF0YS5maWx0ZXIoZm9vdGVyRmlsdGVyTWV0aG9kKSA6IGZvb3RlckRhdGFcclxuICAgIGZvb3RlcnMuZm9yRWFjaCgocm93czogYW55W10pID0+IHtcclxuICAgICAgY29uc3QgaXRlbTogYW55ID0ge31cclxuICAgICAgY29sdW1ucy5mb3JFYWNoKChjb2x1bW46IGFueSkgPT4ge1xyXG4gICAgICAgIGl0ZW1bY29sdW1uLmlkXSA9IFhFVXRpbHMudG9TdHJpbmcocm93c1skdGFibGUuJGdldENvbHVtbkluZGV4KGNvbHVtbildKSB8fCAnICdcclxuICAgICAgfSlcclxuICAgICAgZm9vdExpc3QucHVzaChpdGVtKVxyXG4gICAgfSlcclxuICB9XHJcbiAgLy8g6L2s5o2icGRmXHJcbiAgY29uc3QgZG9jID0gbmV3IGpzUERGKHsgcHV0T25seVVzZWRGb250czogdHJ1ZSwgb3JpZW50YXRpb246ICdsYW5kc2NhcGUnIH0pO1xyXG4gIGRvYy50YWJsZSgxLCAxLCByb3dMaXN0LmNvbmNhdChmb290TGlzdCksIGhlYWRlcnMsIHsgcHJpbnRIZWFkZXJzOiBpc0hlYWRlciwgYXV0b1NpemU6IGZhbHNlIH0pO1xyXG4gIGRvYy5zYXZlKGAke2ZpbGVuYW1lfS4ke3R5cGV9YClcclxuICBpZiAobWVzc2FnZSAhPT0gZmFsc2UpIHtcclxuICAgICR0YWJsZS4kWE1vZGFsLm1lc3NhZ2UoeyBtZXNzYWdlOiBpMThuKCd2eGUudGFibGUuZXhwU3VjY2VzcycpLCBzdGF0dXM6ICdzdWNjZXNzJyB9KVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gaGFuZGxlRXhwb3J0RXZlbnQocGFyYW1zOiBhbnkpIHtcclxuICBpZiAocGFyYW1zLm9wdGlvbnMudHlwZSA9PT0gJ3BkZicpIHtcclxuICAgIGV4cG9ydFBERihwYXJhbXMpXHJcbiAgICByZXR1cm4gZmFsc2VcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDln7rkuo4gdnhlLXRhYmxlIOihqOagvOeahOWinuW8uuaPkuS7tu+8jOaUr+aMgeWvvOWHuiBwZGYg5qC85byPXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgVlhFVGFibGVQbHVnaW5FeHBvcnRQREY6IGFueSA9IHtcclxuICBpbnN0YWxsKHh0YWJsZTogdHlwZW9mIFZYRVRhYmxlKSB7XHJcbiAgICBPYmplY3QuYXNzaWduKHh0YWJsZS50eXBlcywgeyBwZGY6IDAgfSlcclxuICAgIHh0YWJsZS5pbnRlcmNlcHRvci5taXhpbih7XHJcbiAgICAgICdldmVudC5leHBvcnQnOiBoYW5kbGVFeHBvcnRFdmVudFxyXG4gICAgfSlcclxuICAgIFZYRVRhYmxlUGx1Z2luRXhwb3J0UERGLnQgPSB4dGFibGUudFxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gaTE4bihrZXk6IHN0cmluZykge1xyXG4gIGlmIChWWEVUYWJsZVBsdWdpbkV4cG9ydFBERi50KSB7XHJcbiAgICByZXR1cm4gVlhFVGFibGVQbHVnaW5FeHBvcnRQREYudChrZXkpXHJcbiAgfVxyXG59XHJcblxyXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LlZYRVRhYmxlKSB7XHJcbiAgd2luZG93LlZYRVRhYmxlLnVzZShWWEVUYWJsZVBsdWdpbkV4cG9ydFBERilcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgVlhFVGFibGVQbHVnaW5FeHBvcnRQREZcclxuIl19
