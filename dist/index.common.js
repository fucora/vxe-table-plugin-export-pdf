"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.VXETablePluginExportPDF = void 0;

var _xeUtils = _interopRequireDefault(require("xe-utils/methods/xe-utils"));

var _jspdf = _interopRequireDefault(require("jspdf"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function getFooterCellValue($table, opts, rows, column) {
  var cellValue = _xeUtils["default"].toString(rows[$table.$getColumnIndex(column)]);

  return cellValue;
}

function exportPDF(params) {
  var colWidth = 0;
  var $table = params.$table,
      options = params.options,
      columns = params.columns,
      datas = params.datas;
  var treeConfig = $table.treeConfig,
      treeOpts = $table.treeOpts;
  var type = options.type,
      filename = options.filename,
      isHeader = options.isHeader,
      isFooter = options.isFooter,
      original = options.original,
      message = options.message,
      footerFilterMethod = options.footerFilterMethod;
  var footList = [];
  var headers = columns.map(function (column) {
    var title = _xeUtils["default"].toString(original ? column.property : column.getTitle()) || ' ';
    colWidth += column.renderWidth;
    return {
      name: column.id,
      prompt: title,
      width: column.renderWidth
    };
  });
  var rowList = [];
  var colRatio = colWidth / 100;
  headers.forEach(function (column) {
    column.width = Math.floor(column.width / colRatio * 4) - 1;
  });

  if (treeConfig) {
    rowList = datas.map(function (row) {
      var item = {};
      columns.forEach(function (column) {
        item[column.id] = column.treeNode ? ' '.repeat(row._level * treeOpts.indent / 8) + row[column.id] : row[column.id];
      });
      return item;
    });
  } else {
    rowList = datas;
  }

  if (isFooter) {
    var footerData = $table.footerData;
    var footers = footerFilterMethod ? footerData.filter(footerFilterMethod) : footerData;
    footers.forEach(function (rows) {
      var item = {};
      columns.forEach(function (column) {
        item[column.id] = getFooterCellValue($table, options, rows, column);
      });
      footList.push(item);
    });
  } // 转换pdf

  /* eslint-disable new-cap */


  var doc = new _jspdf["default"]({
    putOnlyUsedFonts: true,
    orientation: 'landscape'
  });
  doc.table(1, 1, rowList.concat(footList), headers, {
    printHeaders: isHeader,
    autoSize: false
  });
  doc.save("".concat(filename, ".").concat(type));

  if (message !== false) {
    $table.$XModal.message({
      message: i18n('vxe.table.expSuccess'),
      status: 'success'
    });
  }
}

function handleExportEvent(params) {
  if (params.options.type === 'pdf') {
    exportPDF(params);
    return false;
  }
}
/**
 * 基于 vxe-table 表格的增强插件，支持导出 pdf 格式
 */


var VXETablePluginExportPDF = {
  install: function install(xtable) {
    Object.assign(xtable.types, {
      pdf: 0
    });
    xtable.interceptor.mixin({
      'event.export': handleExportEvent
    });
    VXETablePluginExportPDF.t = xtable.t;
  }
};
exports.VXETablePluginExportPDF = VXETablePluginExportPDF;

function i18n(key) {
  if (VXETablePluginExportPDF.t) {
    return VXETablePluginExportPDF.t(key);
  }
}

if (typeof window !== 'undefined' && window.VXETable) {
  window.VXETable.use(VXETablePluginExportPDF);
}

var _default = VXETablePluginExportPDF;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
